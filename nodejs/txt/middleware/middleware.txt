

const middleware=(req,res,next)=>{
    req.addproperty=value // send in next middleware
    next()//excute next middleware
}
===============================================================================================
1.indiviualRoute ==> ki ==>apply middleware
   app.get(routePath   ,(req, res, next) {},(req, res, next) {},(req, res, next) {})
   app.post(routepath  ,(req, res, next) {},etc...)
   app.put(routepath   ,(req, res, next) {},etc...)
   app.patch(routepath ,(req, res, next) {},etc...)
   app.delete(routepath,(req, res, next) {},etc...)
===============================================================================================
2. at a time  apply AllRoutes ==>middleware
   app.use(routepath,(req, res, next) {})  
   app.use("*"      ,(req, res, next) {})
   app.use((req, res, next) {})
   app.All(routepath,(req, res, next) {})
================================================================================================
3.at a time apply multiple middleware in ==> single resoursePath 
   app.get(routepath,middleware1,middleware2,middleware3)
   app.use(routepath,middleware1,middleware2,middleware3)
================================================================================================
4.all method common route vuntee ==> that time we can use in methodChaining approch 
    i) app.route('/routepath').get(function (req, res, next) {})
                              .post(function (req, res, next) {})
                              .put(function (req, res, next) {})

   ii) app.route('/routepath').get(function (req, res, next) {},function (req, res, next) {})
                              .post(function (req, res, next) {},function (req, res, next) {})
                              .put(function (req, res, next) {},function (req, res, next) {})
=================================================================================================                       
5./*particular Dynamic parameters is enter in user ==>that time this MiddleWareRouter called*/
const MiddlewareRouter=require("express").Router()//return router object
/*paramMiddleware */
MiddlewareRouter.param("id",(req,res,next,value)=>{
   console.log(value)
   next()
})
===================================================================================================
6.Router Middleware
1.let express=require("express)
2.let app=express();
3.const MiddlewareRouter=express.Router()//return router object
4.MiddlewareRouter.route("/") ===>non Duplicate path
                  .get(GetHandeler)
                  .put(putHandelermethod)                                                       
                  .post(bodyvalidation,PostHandler)==>chaining multiple middlewares
5.MiddlewareRouter.route("/no") ===>non Duplicate path
                  .patch(PatchHandler)
                  .delete( DeleteHandler)
                                                                   
6.app.use("movies/lang/type",MiddlewareRouter)=>Duplicate path
====================================================================================================
7.Dynamically send  static file :-
app.use(express.static("./public"))
==========================array==========================================================================
8.function logOriginalUrl (req, res, next) {
  console.log('Request URL:', req.originalUrl)
  next()
}

function logMethod (req, res, next) {
  console.log('Request Type:', req.method)
  next()
}

const logStuff = [logOriginalUrl, logMethod]
app.get('/user/:id', logStuff, (req, res, next) => {
  res.send('User Info')
})
====================================error halding====================================================
app.use((err, req, res, next) => {
  console.error(err.stack)
  res.status(500).send('Something broke!')
})
===============================Note======================================================================
1.middle 2types:- 1.routeless middlware 
                  2.route middleware 
                  3.param middleware
                  4.static middleware 
                  5.router miidleware 
2. routes-less mideelware use chesthe ===> only one time response ni send cheyali else error ocuur 
                                      ===>but all middleware lonu ==> logic immplement chesukovachu || req send cheyavacu
3.okka route ===>eni mmideware apply chesukovachu 
  eg:- app.use("/",(req,res,next)=>{...next()},(req,res,next)=>{...next()},....)
  =======================real Time middlewares======================================================

  server.use(express.json()) ==>add client sended body in  req object @ server
  server.use(morgan("dev)) ==> check the clent details
  ---------------------- -------------------- ---------------------- ------------------------
  1.server.use(express.static("./public")) ==> server the static files in client to senter particlar file name in url
  1.server.use('/static', express.static(path.join(__dirname, 'public')))
=====================================Routeless middleware==================================================================

const express = require("express");
const app = express();

// Middleware function
const myMiddleware = (req, res, next) => {
    console.log("This is a routeless middleware");
    next();
};

// Applying middleware at the application level
app.use(myMiddleware);

// Define your routes below
app.get("/", (req, res) => {
    res.send("Hello World!");
});

// Start the server
const port = 3000;
app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});
==========================================================
type of middlewares :- 
* Route less Middleware || Application-level middleware || global Middleware
* Route Middleware
* Error Handling Middleware
* Third-party Middleware :- 
                1. Express.js Middleware
                2. Body-parser
                3. Morgan
                4. Cors
                5. Compression
                6. Multer
                7. Passport,js
                8. Express-validator
                9. Cookie-parser
               10. Express-session
//resoures endpoints Resueblity 
* Router -->1.server  provide Route
            2.express provide Route ==>advantage --> Middleware apply here(possiblty)//endpoints more reuseable
* Param Middleware
* Static Middleware
***************************************************************************
1. Route-less Middleware:-
const express = require("express");
const app = express();

// Route-less middleware function
const routelessMiddleware = (req, res, next) => {
    console.log("This is a route-less middleware");
    next();
};

// Applying route-less middleware at the application level
app.use(routelessMiddleware);

// Define your routes below
app.get("/", (req, res) => {
    res.send("Hello World!");
});

// Start the server
const port = 3000;
app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});
***************************************************************************
2.Route middleware :- 
const express = require("express");
const app = express();

// Route middleware function
const routeMiddleware = (req, res, next) => {
    console.log("This is a route middleware for /user route");
    next();
};

// Applying route middleware to a specific route
app.get("/user", routeMiddleware, (req, res) => {
    res.send("User Information");
});

// Start the server
const port = 3000;
app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});
*****************************************************************************
Note:- next() method ==> calls the next middleware && 
       next(error)  ===> only pass the error msgs from next middlewares
------------------------------------------------------------------------------
3.Error middleware 
const express = require('express');
const app = express();

// Route handler that throws an error
app.get('/error', (req, res, next) => {
    // Simulate an error
    const err = new Error('Intentional Error');
    err.status = 404;
    next(err); // Pass the error to the next middleware
});

// Custom error handling middleware
app.use((err, req, res, next) => {
    // Customize error response based on status code
    if (err.status === 404) {
        res.status(404).send('Not Found');
    } else {
        res.status(500).send('Internal Server Error');
    }
});

// Start the server
const port = 3000;
app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});
*************************************************************************
4.Router Middleware
const express = require('express');
const app = express();

// Middleware function
const logMiddleware = (req, res, next) => {
    console.log('Incoming request:', req.url);
    next(); // Pass control to the next middleware function
};

// Router middleware
const router = express.Router();

// Applying middleware to the router
router.use(logMiddleware);

// Define routes
router.get('/', (req, res) => {
    res.send('Hello World!');
});

router.get('/about', (req, res) => {
    res.send('About Us');
});

// Mount the router at a specific path
app.use('/api', router);

// Start the server
app.listen(3000, () => {
    console.log('Server is running on port 3000');
});
